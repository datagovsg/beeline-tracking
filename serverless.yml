service: beeline-tracking

frameworkVersion: ">=1.1.0 <2.0.0"

plugins:
  - serverless-dynamodb-autoscaling

provider:
  name: aws
  region: ap-southeast-1
  stage: staging
  runtime: nodejs6.10
  memorySize: 128
  environment:
    TRACKING_TABLE: ${self:service}-${opt:stage, self:provider.stage}
    ROSTER_TABLE: ${self:service}-roster-${opt:stage, self:provider.stage}
    PERFORMANCE_TABLE: ${self:service}-performance-${opt:stage, self:provider.stage}
    MONITORING_TABLE: ${self:service}-monitoring-${opt:stage, self:provider.stage}
    EVENTS_TABLE: ${self:service}-events-${opt:stage, self:provider.stage}
    AUTH0_SECRET: ${env:AUTH0_SECRET}
    API_URL: ${env:API_URL}
    DATABASE_URL: ${env:DATABASE_URL}
    TELEGRAM_TOKEN: ${env:TELEGRAM_TOKEN}
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:BatchWriteItem
        - dynamodb:PutItem
      Resource: "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/*"

functions:
  monitoring:
    handler: src/daemons/monitoring/index.handler
    memorySize: 512
    timeout: 45
    events:
      - schedule: ${env:MONITORING_RATE}
  latest-post:
    handler: src/latest.post
    events:
      - http:
          path: trips/{tripId}/pings/latest
          method: post
          cors: true
  latest-get:
    handler: src/latest.get
    events:
      - http:
          path: trips/{tripId}/pings/latest
          method: get
          cors: true
  get:
    handler: src/history.get
    timeout: 30
    events:
      - http:
          path: trips/{tripId}/pings
          method: get
          cors: true
          request:
            parameters:
              querystrings:
                limit: false
  roster:
    handler: src/roster.put
    events:
      - http:
          path: trips/{tripId}/roster
          method: put
          cors: true
  telegram:
    handler: src/telegram.hook
    events:
      - http:
          path: telegram/hook
          method: POST
          cors: true

custom:
  capacities:
    - table: TrackingDynamoDbTable
      read:
        minimum: 2
        maximum: 200
      write:
        minimum: 2
        maximum: 100
    - table: RosterDynamoDbTable
      read:
        minimum: 2
        maximum: 100
      write:
        minimum: 2
        maximum: 100
    - table: PerformanceDynamoDbTable
      read:
        minimum: 2
        maximum: 100
      write:
        minimum: 10
        maximum: 100
    - table: MonitoringDynamoDbTable
      read:
        minimum: 2
        maximum: 100
      write:
        minimum: 10
        maximum: 100
    - table: EventsDynamoDbTable
      read:
        minimum: 2
        maximum: 100
      write:
        minimum: 10
        maximum: 200

resources:
  Resources:
    ApiGatewayMethodTripsTripidVarPingsLatestGet:
      Properties:
        RequestParameters:
          method.request.path.tripId: true
        Integration:
          RequestParameters:
            integration.request.path.tripId: method.request.path.tripId
          CacheNamespace: ApiGatewayMethodTripsTripidVarPingsLatestGetCacheNS
          CacheKeyParameters:
            - method.request.path.tripId
    ApiGatewayMethodTripsTripidVarPingsGet:
      Properties:
        RequestParameters:
          method.request.path.tripId: true
          method.request.querystring.limit: false
        Integration:
          RequestParameters:
            integration.request.path.tripId: method.request.path.tripId
            integration.request.querystring.limit: method.request.querystring.limit
          CacheNamespace: ApiGatewayMethodTripsTripidVarPingsGetCacheNS
          CacheKeyParameters:
            - method.request.path.tripId
            - method.request.querystring.limit
    TrackingDynamoDbTable:
      Type: 'AWS::DynamoDB::Table'
      Properties:
        AttributeDefinitions:
          -
            AttributeName: tripId
            AttributeType: N
          -
            AttributeName: time
            AttributeType: N
        KeySchema:
          -
            AttributeName: tripId
            KeyType: HASH
          -
            AttributeName: time
            KeyType: RANGE
        ProvisionedThroughput:
          ReadCapacityUnits: 20
          WriteCapacityUnits: 20
        TableName: ${self:provider.environment.TRACKING_TABLE}
    RosterDynamoDbTable:
      Type: 'AWS::DynamoDB::Table'
      Properties:
        AttributeDefinitions:
          -
            AttributeName: tripId
            AttributeType: N
          -
            AttributeName: time
            AttributeType: N
        KeySchema:
          -
            AttributeName: tripId
            KeyType: HASH
          -
            AttributeName: time
            KeyType: RANGE
        ProvisionedThroughput:
          ReadCapacityUnits: 20
          WriteCapacityUnits: 20
        TableName: ${self:provider.environment.ROSTER_TABLE}
    PerformanceDynamoDbTable:
      Type: 'AWS::DynamoDB::Table'
      Properties:
        AttributeDefinitions:
          -
            AttributeName: routeId
            AttributeType: N
          -
            AttributeName: date
            AttributeType: S
        KeySchema:
          -
            AttributeName: routeId
            KeyType: HASH
          -
            AttributeName: date
            KeyType: RANGE
        ProvisionedThroughput:
          ReadCapacityUnits: 20
          WriteCapacityUnits: 20
        TableName: ${self:provider.environment.PERFORMANCE_TABLE}
    MonitoringDynamoDbTable:
      Type: 'AWS::DynamoDB::Table'
      Properties:
        AttributeDefinitions:
          -
            AttributeName: transportCompanyId
            AttributeType: N
          -
            AttributeName: time
            AttributeType: N
        KeySchema:
          -
            AttributeName: transportCompanyId
            KeyType: HASH
          -
            AttributeName: time
            KeyType: RANGE
        ProvisionedThroughput:
          ReadCapacityUnits: 20
          WriteCapacityUnits: 20
        TableName: ${self:provider.environment.MONITORING_TABLE}
    EventsDynamoDbTable:
      Type: 'AWS::DynamoDB::Table'
      Properties:
        AttributeDefinitions:
          -
            AttributeName: dateRoute
            AttributeType: S
          -
            AttributeName: alertId
            AttributeType: S
        KeySchema:
          -
            AttributeName: dateRoute
            KeyType: HASH
          -
            AttributeName: alertId
            KeyType: RANGE
        ProvisionedThroughput:
          ReadCapacityUnits: 20
          WriteCapacityUnits: 20
        TableName: ${self:provider.environment.EVENTS_TABLE}
